{"version":3,"sources":["webpack:///./src/templates/blog-post.tsx","webpack:///./src/styles/styled.ts","webpack:///./src/components/atomics/seo.tsx","webpack:///./src/components/atomics/typography/paragraph.ts","webpack:///./src/components/ui/nav/nav-list.ts","webpack:///./src/components/ui/nav/nav-list-item.ts","webpack:///./src/components/ui/nav/bottom-nav.tsx","webpack:///./src/styles/theme.ts","webpack:///./src/styles/global.ts","webpack:///./src/styles/global.style.wrapper.tsx","webpack:///./src/components/ui/nav/top-nav.tsx","webpack:///./src/layouts/main-layout.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_atomics_seo__WEBPACK_IMPORTED_MODULE_1__","gatsby__WEBPACK_IMPORTED_MODULE_2__","_layouts_main_layout__WEBPACK_IMPORTED_MODULE_3__","BlogPostTemplate","_ref","data","a","createElement","to","title","markdownRemark","frontmatter","date","dangerouslySetInnerHTML","__html","html","styled","baseStyled","SEO","description","lang","meta","keywords","author","image","audio","video","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","query","render","_ref2","site","metaTitle","siteMetadata","metaDescription","metaAuthor","metaKeywords","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","concat","length","join","_public_static_d_4017075492_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","Paragraph","p","withConfig","displayName","componentId","props","theme","primaryColor","NavList","ul","NavListItem","li","secondaryBackground","BottomNavGroup","nav","BottomNavContainer","div","FooterContainer","footer","BottomNav","react_default","paragraph","as","nav_list","menuQuery","menuLinks","map","link","nav_list_item","key","gatsby_browser_entry","activeClassName","PrimaryTheme","primaryBackground","secondaryColor","primaryHighlight","secondaryHighlight","GlobalStyle","createGlobalStyle","_templateObject","GlobalStyleWrapper","children","react","global","TopNav","PageContainer","Content","MainLayout","global_style_wrapper","styled_components_browser_esm","top_nav","bottom_nav","_1310266462"],"mappings":"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","file":"component---src-templates-blog-post-tsx-c2fd56570a4faa8d77df.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport SEO from '../components/atomics/seo';\nimport { graphql, Link } from 'gatsby';\nimport { MainLayout } from '../layouts/main-layout';\n\ninterface BlogPostTemplatePropType {\n    data: {\n        markdownRemark: {\n            frontmatter: {\n                date: string;\n                path: string;\n                title: string;\n            };\n            html: string;\n        };\n    };\n}\n\nconst BlogPostTemplate: FunctionComponent<BlogPostTemplatePropType> = ({ data }) => (\n    <MainLayout>\n        <Link to='/blog'>Back to Blog</Link>\n        <SEO title={`Byron's Blog - ${data.markdownRemark.frontmatter.title}`} />\n        <h1>{data.markdownRemark.frontmatter.title}</h1>\n        <div>{data.markdownRemark.frontmatter.date}</div>\n        <div dangerouslySetInnerHTML={{ __html: data.markdownRemark.html }} />\n    </MainLayout>\n);\n\nexport const pageQuery = graphql`\n    query BlogPostByPath($path: String!) {\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n            html\n            frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                path\n                title\n            }\n        }\n    }\n`;\n\nexport default BlogPostTemplate;\n","import baseStyled, { ThemedStyledInterface } from 'styled-components';\nimport PrimaryTheme from './theme';\n\nexport type Theme = typeof PrimaryTheme;\nexport const styled = baseStyled as ThemedStyledInterface<Theme>;\n","import React, { FunctionComponent } from 'react';\nimport Helmet from 'react-helmet';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst detailsQuery = graphql`\n    query DefaultSEOQuery {\n        site {\n            siteMetadata {\n                title\n                description\n                author\n            }\n        }\n    }\n`;\n\nexport interface SEOPropTypes {\n    audio?: string;\n    author?: string;\n    description?: string;\n    image?: string;\n    keywords?: string[];\n    lang?: string;\n    // tslint:disable-next-line:no-any\n    meta?: any[];\n    title: string;\n    video?: string;\n}\n\n// tslint:disable-next-line:no-commented-code\n// tslint:disable:jsx-no-lambda\n// tslint:disable:no-use-before-declare\n// tslint:disable:jsx-no-multiline-js\nconst SEO: FunctionComponent<SEOPropTypes> = ({\n    description,\n    lang,\n    meta,\n    keywords,\n    title,\n    author,\n    image,\n    audio,\n    video,\n}: SEOPropTypes) => (\n    <StaticQuery\n        query={detailsQuery}\n        render={({ site }) => {\n            const metaTitle = title || site.siteMetadata.title;\n            const metaDescription = description || site.siteMetadata.description;\n            const metaAuthor = author || site.siteMetadata.author;\n            const metaKeywords = keywords || site.siteMetadata.keywords;\n            return (\n                <Helmet\n                    htmlAttributes={{\n                        lang,\n                    }}\n                    title={metaTitle}\n                    titleTemplate={`%s | ${site.siteMetadata.title}`}\n                    meta={[\n                        {\n                            name: `description`,\n                            content: metaDescription,\n                        },\n                        {\n                            property: `og:title`,\n                            content: metaTitle,\n                        },\n                        {\n                            property: `og:description`,\n                            content: metaDescription,\n                        },\n                        {\n                            property: `og:type`,\n                            content: `website`,\n                        },\n                        {\n                            name: `twitter:card`,\n                            content: `summary`,\n                        },\n                        {\n                            name: `twitter:creator`,\n                            content: metaAuthor,\n                        },\n                        {\n                            name: `twitter:title`,\n                            content: metaTitle,\n                        },\n                        {\n                            name: `twitter:description`,\n                            content: metaDescription,\n                        },\n                    ]\n                        .concat(\n                            metaKeywords.length > 0\n                                ? {\n                                      name: `keywords`,\n                                      content: metaKeywords.join(`, `),\n                                  }\n                                : []\n                        )\n                        .concat(\n                            image\n                                ? [\n                                      {\n                                          property: `og:image`,\n                                          content: image,\n                                      },\n                                      {\n                                          property: `og:image:width`,\n                                          content: `1200`,\n                                      },\n                                      {\n                                          property: `og:image:height`,\n                                          content: `630`,\n                                      },\n                                  ]\n                                : []\n                        )\n                        .concat(\n                            audio\n                                ? {\n                                      property: `og:audio`,\n                                      content: audio,\n                                  }\n                                : []\n                        )\n                        .concat(\n                            video\n                                ? {\n                                      property: `og:video`,\n                                      content: video,\n                                  }\n                                : []\n                        )\n                        .concat(meta!)}\n                />\n            );\n        }}\n    />\n);\n\nSEO.defaultProps = {\n    lang: `en`,\n    meta: [],\n    keywords: [],\n};\n\nexport default SEO;\n","import { styled } from '../../../styles/styled';\n\nexport const Paragraph = styled.p`\n    color: ${props => props.theme.primaryColor};\n`;\n","import { styled } from '../../../styles/styled';\n\nexport const NavList = styled.ul`\n    list-style: none;\n    padding: 0;\n    margin: 0;\n`;\n\nexport default NavList;\n","import { styled } from '../../../styles/styled';\n\nexport const NavListItem = styled.li`\n    a {\n        color: inherit;\n        &.active {\n            color: ${props => props.theme.secondaryBackground};\n            font-weight: bolder;\n        }\n    }\n`;\n\nexport default NavListItem;\n","import React, { FunctionComponent } from 'react';\nimport { NavProps } from './nav';\nimport { styled } from '../../../styles/styled';\nimport NavList from './nav-list';\nimport { Link } from 'gatsby';\nimport NavListItem from './nav-list-item';\nimport { Paragraph } from '../../atomics/typography/paragraph';\n\nexport const BottomNavGroup = styled.nav`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n`;\n\nexport const BottomNavContainer = styled.div`\n    display: flex;\n    > :not(:last-child) {\n        margin-right: 10em;\n    }\n`;\n\nexport const FooterContainer = styled.footer`\n    color: ${props => props.theme.primaryColor};\n    padding: 2em;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\nexport const BottomNav: FunctionComponent<NavProps> = props => (\n    <FooterContainer>\n        <BottomNavContainer>\n            <div>\n                <Paragraph as={'summary'}>\n                    Byron Mejia <br /> software developer, dog owner, and stuff\n                </Paragraph>\n            </div>\n\n            <BottomNavGroup>\n                <NavList>\n                    {props.menuQuery.site.siteMetadata.menuLinks.map(link => (\n                        <NavListItem key={link.link}>\n                            <Link to={link.link} activeClassName='active'>\n                                {link.name}\n                            </Link>\n                        </NavListItem>\n                    ))}\n                </NavList>\n            </BottomNavGroup>\n        </BottomNavContainer>\n        <Paragraph>ABN: 79 833 467 197</Paragraph>\n    </FooterContainer>\n);\n\nexport default BottomNav;\n","export type CSSVariableTypes =\n    | 'primaryBackground'\n    | 'secondaryBackground'\n    | 'primaryColor'\n    | 'secondaryColor'\n    | 'primaryHighlight'\n    | 'secondaryHighlight';\nexport type ThemeRecord = Readonly<Record<CSSVariableTypes, string>>;\n\nexport const PrimaryTheme: ThemeRecord = {\n    primaryBackground: '#171219',\n    secondaryBackground: '#EA526F',\n    primaryColor: '#f9faf1',\n    secondaryColor: '#46B1E9',\n    primaryHighlight: '#EF6F6C',\n    secondaryHighlight: '#56E39F',\n};\nexport default PrimaryTheme;\n","import { createGlobalStyle } from 'styled-components';\nimport PrimaryTheme from './theme';\n\nexport const GlobalStyle = createGlobalStyle`\n    /* You can add global styles to this file, and also import other style files */\n    @import url('https://fonts.googleapis.com/css?family=Open+Sans');\n\n    * {\n        box-sizing: border-box;\n    }\n\n    h1, h2 {\n        margin: .25em 0;\n    }\n\n    html, body {\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        font-family: 'Open Sans', sans-serif;\n        background-color: ${PrimaryTheme.primaryBackground};\n        color: ${PrimaryTheme.primaryColor};\n    }\n\n    @media print {\n        body {\n            -webkit-print-color-adjust: exact;\n        }\n    }\n\n    @page {\n        size: A4 portrait;\n        margin-left: 0px;\n        margin-right: 0px;\n        margin-top: 0px;\n        margin-bottom: 0px;\n        margin: 0;\n        -webkit-print-color-adjust: exact;\n    }\n`;\n\nexport default GlobalStyle;\n","import React, { FunctionComponent, Fragment } from 'react';\nimport GlobalStyle from './global';\n\nconst GlobalStyleWrapper: FunctionComponent = ({ children }) => (\n    <Fragment>\n        <GlobalStyle />\n        {children}\n    </Fragment>\n);\n\nexport default GlobalStyleWrapper;\n","import React, { FunctionComponent } from 'react';\nimport { NavProps } from './nav';\n\nexport const TopNav: FunctionComponent<NavProps> = props => (\n    <header>{/*<nav>{JSON.stringify(props)}</nav>*/}</header>\n);\n\nexport default TopNav;\n","/* tslint:disable:jsx-no-lambda */\nimport React, { FunctionComponent } from 'react';\nimport { graphql, StaticQuery } from 'gatsby';\nimport { SiteMenuLinksQuery } from './site-menu-links-query';\nimport BottomNav from '../components/ui/nav/bottom-nav';\nimport { styled } from '../styles/styled';\nimport PrimaryTheme from '../styles/theme';\nimport GlobalStyleWrapper from '../styles/global.style.wrapper';\nimport { ThemeProvider } from 'styled-components';\nimport TopNav from '../components/ui/nav/top-nav';\n\nconst PageContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n    justify-content: space-between;\n`;\n\nconst Content = styled.div`\n    flex: 1;\n`;\n\nexport const MainLayout: FunctionComponent<{}> = props => (\n    <StaticQuery\n        query={graphql`\n            query SiteMenuLinksQuery {\n                site {\n                    siteMetadata {\n                        menuLinks {\n                            name\n                            link\n                        }\n                    }\n                }\n            }\n        `}\n        render={(data: SiteMenuLinksQuery) => (\n            <GlobalStyleWrapper>\n                <ThemeProvider theme={PrimaryTheme}>\n                    <PageContainer>\n                        <TopNav menuQuery={data} />\n                        <Content>{props.children}</Content>\n                        <BottomNav menuQuery={data} />\n                    </PageContainer>\n                </ThemeProvider>\n            </GlobalStyleWrapper>\n        )}\n    />\n);\n"],"sourceRoot":""}