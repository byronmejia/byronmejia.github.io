{"version":3,"sources":["webpack:///./src/components/blog/blog-preview.component.tsx","webpack:///./src/pages/blog/index.tsx","webpack:///./src/styles/styled.ts","webpack:///./src/components/atomics/seo.tsx","webpack:///./src/components/atomics/typography/paragraph.ts","webpack:///./src/components/ui/nav/nav-list.ts","webpack:///./src/components/ui/nav/nav-list-item.ts","webpack:///./src/components/ui/nav/bottom-nav.tsx","webpack:///./src/styles/theme.ts","webpack:///./src/styles/global.ts","webpack:///./src/styles/global.style.wrapper.tsx","webpack:///./src/components/ui/nav/top-nav.tsx","webpack:///./src/layouts/main-layout.tsx","webpack:///./src/components/atomics/typography/header.main.ts"],"names":["BlogPreview","props","react_default","a","createElement","gatsby_browser_entry","to","node","frontmatter","path","title","date","excerpt","__webpack_require__","d","__webpack_exports__","blog_BlogIndex","pageQuery","BlogIndex","posts","data","allMarkdownRemark","edges","map","x","main_layout","seo","keywords","header_main","post","blog_preview_component_BlogPreview","key","styled","baseStyled","SEO","_ref","description","lang","meta","author","image","audio","video","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_3__","query","render","_ref2","site","metaTitle","siteMetadata","metaDescription","metaAuthor","metaKeywords","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","concat","length","join","_public_static_d_4017075492_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","Paragraph","p","withConfig","displayName","componentId","theme","primaryColor","NavList","ul","NavListItem","li","secondaryBackground","BottomNavGroup","nav","BottomNavContainer","div","FooterContainer","footer","BottomNav","paragraph","as","nav_list","menuQuery","menuLinks","link","nav_list_item","activeClassName","PrimaryTheme","primaryBackground","secondaryColor","primaryHighlight","secondaryHighlight","GlobalStyle","createGlobalStyle","_templateObject","GlobalStyleWrapper","children","react","global","TopNav","PageContainer","Content","MainLayout","global_style_wrapper","styled_components_browser_esm","top_nav","bottom_nav","_1310266462","Header","h1"],"mappings":"+IAKaA,EAAkD,SAAAC,GAAK,OAChEC,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMC,GAAIL,EAAMM,KAAKC,YAAYC,MAC7BP,EAAAC,EAAAC,cAAA,UAAKH,EAAMM,KAAKC,YAAYE,OAC5BR,EAAAC,EAAAC,cAAA,YAAOH,EAAMM,KAAKC,YAAYG,MAC9BT,EAAAC,EAAAC,cAAA,SAAIH,EAAMM,KAAKK,oBCPvBC,EAAAC,EAAAC,EAAA,8BAAAC,IAAAH,EAAAC,EAAAC,EAAA,8BAAAE,IAeO,IAAMC,EAA+C,SAAAjB,GACxD,IAAMkB,EAAQlB,EAAMmB,KAAKC,kBAAkBC,MAAMC,IAAI,SAAAC,GAAC,OAAIA,EAAEjB,OAC5D,OACIL,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACIvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CACIhB,MAAM,OACNiB,SAAU,CACN,OACA,aACA,aACA,cACA,QACA,QACA,WACA,SACA,UACA,OACA,SACA,cAGRzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,aACCT,EAAMI,IAAI,SAAAM,GAAI,OACX3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAaC,IAAKF,EAAKrB,YAAYE,MAAQmB,EAAKrB,YAAYE,MAAOH,KAAMsB,QAQ5EZ,GAFEC,YAEO,+CChDtBL,EAAAC,EAAAC,EAAA,sBAAAiB,IAAA,IAIaA,EAJbnB,EAAA,KAIsBoB,2FC6BhBC,EAAuC,SAAAC,GAAA,IACzCC,EADyCD,EACzCC,YACAC,EAFyCF,EAEzCE,KACAC,EAHyCH,EAGzCG,KACAX,EAJyCQ,EAIzCR,SACAjB,EALyCyB,EAKzCzB,MACA6B,EANyCJ,EAMzCI,OACAC,EAPyCL,EAOzCK,MACAC,EARyCN,EAQzCM,MACAC,EATyCP,EASzCO,MATyC,OAWzCC,EAAAxC,EAAAC,cAACwC,EAAA,YAAD,CACIC,MAzCU,aA0CVC,OAAQ,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KACDC,EAAYvC,GAASsC,EAAKE,aAAaxC,MACvCyC,EAAkBf,GAAeY,EAAKE,aAAad,YACnDgB,EAAab,GAAUS,EAAKE,aAAaX,OACzCc,EAAe1B,GAAYqB,EAAKE,aAAavB,SACnD,OACIgB,EAAAxC,EAAAC,cAACkD,EAAAnD,EAAD,CACIoD,eAAgB,CACZlB,QAEJ3B,MAAOuC,EACPO,cAAa,QAAUR,EAAKE,aAAaxC,MACzC4B,KAAM,CACF,CACImB,KAAI,cACJC,QAASP,GAEb,CACIQ,SAAQ,WACRD,QAAST,GAEb,CACIU,SAAQ,iBACRD,QAASP,GAEb,CACIQ,SAAQ,UACRD,QAAO,WAEX,CACID,KAAI,eACJC,QAAO,WAEX,CACID,KAAI,kBACJC,QAASN,GAEb,CACIK,KAAI,gBACJC,QAAST,GAEb,CACIQ,KAAI,sBACJC,QAASP,IAGZS,OACGP,EAAaQ,OAAS,EAChB,CACIJ,KAAI,WACJC,QAASL,EAAaS,KAAb,OAEb,IAETF,OACGpB,EACM,CACI,CACImB,SAAQ,WACRD,QAASlB,GAEb,CACImB,SAAQ,iBACRD,QAAO,QAEX,CACIC,SAAQ,kBACRD,QAAO,QAGf,IAETE,OACGnB,EACM,CACIkB,SAAQ,WACRD,QAASjB,GAEb,IAETmB,OACGlB,EACM,CACIiB,SAAQ,WACRD,QAAShB,GAEb,IAETkB,OAAOtB,MA1F5BlB,KAAA2C,KAiGJ7B,EAAI8B,aAAe,CACf3B,KAAI,KACJC,KAAM,GACNX,SAAU,IAGCO,iTCnJfrB,EAAAC,EAAAC,EAAA,sBAAAkD,IAAA,IAEaA,EAFbpD,EAAA,KAEyBmB,EAAOkC,EAAVC,WAAA,CAAAC,YAAA,uBAAAC,YAAA,gBAAGrC,CAAH,eACT,SAAA/B,GAAK,OAAIA,EAAMqE,MAAMC,uOCKnBC,EANQxC,IAAOyC,GAAVN,WAAA,CAAAC,YAAA,oBAAAC,YAAA,YAAGrC,CAAH,yCCUL0C,EAVY1C,IAAO2C,GAAVR,WAAA,CAAAC,YAAA,6BAAAC,YAAA,YAAGrC,CAAH,6DAIH,SAAA/B,GAAK,OAAIA,EAAMqE,MAAMM,+BCE7BC,EAAiB7C,IAAO8C,IAAVX,WAAA,CAAAC,YAAA,6BAAAC,YAAA,gBAAGrC,CAAH,yDAMd+C,EAAqB/C,IAAOgD,IAAVb,WAAA,CAAAC,YAAA,iCAAAC,YAAA,gBAAGrC,CAAH,yDAOlBiD,EAAkBjD,IAAOkD,OAAVf,WAAA,CAAAC,YAAA,8BAAAC,YAAA,gBAAGrC,CAAH,iFACf,SAAA/B,GAAK,OAAIA,EAAMqE,MAAMC,eAgCnBY,EAzBuC,SAAAlF,GAAK,OACvDC,EAAAC,EAAAC,cAAC6E,EAAD,KACI/E,EAAAC,EAAAC,cAAC2E,EAAD,KACI7E,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACgF,EAAA,EAAD,CAAWC,GAAI,WAAf,eACgBnF,EAAAC,EAAAC,cAAA,WADhB,8CAKJF,EAAAC,EAAAC,cAACyE,EAAD,KACI3E,EAAAC,EAAAC,cAACkF,EAAD,KACKrF,EAAMsF,UAAUvC,KAAKE,aAAasC,UAAUjE,IAAI,SAAAkE,GAAI,OACjDvF,EAAAC,EAAAC,cAACsF,EAAD,CAAa3D,IAAK0D,EAAKA,MACnBvF,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMC,GAAImF,EAAKA,KAAME,gBAAgB,UAChCF,EAAKhC,YAO9BvD,EAAAC,EAAAC,cAACgF,EAAA,EAAD,8BCjCOQ,EAR0B,CACrCC,kBAAmB,UACnBjB,oBAAqB,UACrBL,aAAc,UACduB,eAAgB,UAChBC,iBAAkB,UAClBC,mBAAoB,62BCZjB,IAsCQC,EAtCYC,YAAHC,IAiBIP,EAAaC,kBACxBD,EAAarB,cCXf6B,EAP+B,SAAAjE,GAAA,IAAGkE,EAAHlE,EAAGkE,SAAH,OAC1CnG,EAAAC,EAAAC,cAACkG,EAAA,SAAD,KACIpG,EAAAC,EAAAC,cAACmG,EAAD,MACCF,ICCMG,EAJoC,SAAAvG,GAAK,OACpDC,EAAAC,EAAAC,cAAA,gDCOJ,IAAMqG,EAAgBzE,IAAOgD,IAAVb,WAAA,CAAAC,YAAA,6BAAAC,YAAA,gBAAGrC,CAAH,wFAOb0E,EAAU1E,IAAOgD,IAAVb,WAAA,CAAAC,YAAA,uBAAAC,YAAA,gBAAGrC,CAAH,aAIA2E,EAAoC,SAAA1G,GAAK,OAClDC,EAAAC,EAAAC,cAACC,EAAA,YAAD,CACIwC,MAAK,aAYLC,OAAQ,SAAC1B,GAAD,OACJlB,EAAAC,EAAAC,cAACwG,EAAD,KACI1G,EAAAC,EAAAC,cAACyG,EAAA,EAAD,CAAevC,MAAOsB,GAClB1F,EAAAC,EAAAC,cAACqG,EAAD,KACIvG,EAAAC,EAAAC,cAAC0G,EAAD,CAAQvB,UAAWnE,IACnBlB,EAAAC,EAAAC,cAACsG,EAAD,KAAUzG,EAAMoG,UAChBnG,EAAAC,EAAAC,cAAC2G,EAAD,CAAWxB,UAAWnE,QAnB1CA,KAAA4F,uCCvBJnG,EAAAC,EAAAC,EAAA,sBAAAkG,IAAA,IAEaA,EAFbpG,EAAA,KAEsBmB,EAAOkF,GAAV/C,WAAA,CAAAC,YAAA,qBAAAC,YAAA,gBAAGrC,CAAH,eACN,SAAA/B,GAAK,OAAIA,EAAMqE,MAAMC","file":"component---src-pages-blog-index-tsx-9486846f32ee2919d7e8.js","sourcesContent":["import { FunctionComponent } from 'react';\nimport { BlogPreviewNode } from './blog-preview.model';\nimport React from 'react';\nimport { Link } from 'gatsby';\n\nexport const BlogPreview: FunctionComponent<BlogPreviewNode> = props => (\n    <Link to={props.node.frontmatter.path}>\n        <h2>{props.node.frontmatter.title}</h2>\n        <time>{props.node.frontmatter.date}</time>\n        <p>{props.node.excerpt}</p>\n    </Link>\n);\n","import { graphql } from 'gatsby';\nimport { FunctionComponent } from 'react';\nimport React from 'react';\nimport SEO from '../../components/atomics/seo';\nimport { Header } from '../../components/atomics/typography/header.main';\nimport { BlogPreviewNode } from '../../components/blog/blog-preview.model';\nimport { BlogPreview } from '../../components/blog/blog-preview.component';\nimport { MainLayout } from '../../layouts/main-layout';\n\ninterface BlogIndexProps {\n    data: {\n        allMarkdownRemark: {\n            edges: BlogPreviewNode[];\n        };\n    };\n}\n\nexport const BlogIndex: FunctionComponent<BlogIndexProps> = props => {\n    const posts = props.data.allMarkdownRemark.edges.map(x => x.node);\n    return (\n        <MainLayout>\n            <SEO\n                title='Blog'\n                keywords={[\n                    'blog',\n                    'javascript',\n                    'typescript',\n                    'programming',\n                    'byron',\n                    'mejia',\n                    'brisbane',\n                    'health',\n                    'fitness',\n                    'life',\n                    'agency',\n                    'software',\n                ]}\n            />\n            <Header>Blog</Header>\n            {posts.map(post => (\n                <BlogPreview key={post.frontmatter.title + post.frontmatter.title} node={post} />\n            ))}\n        </MainLayout>\n    );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n    query {\n        allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }, limit: 1000) {\n            edges {\n                node {\n                    excerpt\n                    frontmatter {\n                        date(formatString: \"MMMM DD, YYYY\")\n                        title\n                        path\n                    }\n                }\n            }\n        }\n    }\n`;\n","import baseStyled, { ThemedStyledInterface } from 'styled-components';\nimport PrimaryTheme from './theme';\n\nexport type Theme = typeof PrimaryTheme;\nexport const styled = baseStyled as ThemedStyledInterface<Theme>;\n","import React, { FunctionComponent } from 'react';\nimport Helmet from 'react-helmet';\nimport { StaticQuery, graphql } from 'gatsby';\n\nconst detailsQuery = graphql`\n    query DefaultSEOQuery {\n        site {\n            siteMetadata {\n                title\n                description\n                author\n            }\n        }\n    }\n`;\n\nexport interface SEOPropTypes {\n    audio?: string;\n    author?: string;\n    description?: string;\n    image?: string;\n    keywords?: string[];\n    lang?: string;\n    // tslint:disable-next-line:no-any\n    meta?: any[];\n    title: string;\n    video?: string;\n}\n\n// tslint:disable-next-line:no-commented-code\n// tslint:disable:jsx-no-lambda\n// tslint:disable:no-use-before-declare\n// tslint:disable:jsx-no-multiline-js\nconst SEO: FunctionComponent<SEOPropTypes> = ({\n    description,\n    lang,\n    meta,\n    keywords,\n    title,\n    author,\n    image,\n    audio,\n    video,\n}: SEOPropTypes) => (\n    <StaticQuery\n        query={detailsQuery}\n        render={({ site }) => {\n            const metaTitle = title || site.siteMetadata.title;\n            const metaDescription = description || site.siteMetadata.description;\n            const metaAuthor = author || site.siteMetadata.author;\n            const metaKeywords = keywords || site.siteMetadata.keywords;\n            return (\n                <Helmet\n                    htmlAttributes={{\n                        lang,\n                    }}\n                    title={metaTitle}\n                    titleTemplate={`%s | ${site.siteMetadata.title}`}\n                    meta={[\n                        {\n                            name: `description`,\n                            content: metaDescription,\n                        },\n                        {\n                            property: `og:title`,\n                            content: metaTitle,\n                        },\n                        {\n                            property: `og:description`,\n                            content: metaDescription,\n                        },\n                        {\n                            property: `og:type`,\n                            content: `website`,\n                        },\n                        {\n                            name: `twitter:card`,\n                            content: `summary`,\n                        },\n                        {\n                            name: `twitter:creator`,\n                            content: metaAuthor,\n                        },\n                        {\n                            name: `twitter:title`,\n                            content: metaTitle,\n                        },\n                        {\n                            name: `twitter:description`,\n                            content: metaDescription,\n                        },\n                    ]\n                        .concat(\n                            metaKeywords.length > 0\n                                ? {\n                                      name: `keywords`,\n                                      content: metaKeywords.join(`, `),\n                                  }\n                                : []\n                        )\n                        .concat(\n                            image\n                                ? [\n                                      {\n                                          property: `og:image`,\n                                          content: image,\n                                      },\n                                      {\n                                          property: `og:image:width`,\n                                          content: `1200`,\n                                      },\n                                      {\n                                          property: `og:image:height`,\n                                          content: `630`,\n                                      },\n                                  ]\n                                : []\n                        )\n                        .concat(\n                            audio\n                                ? {\n                                      property: `og:audio`,\n                                      content: audio,\n                                  }\n                                : []\n                        )\n                        .concat(\n                            video\n                                ? {\n                                      property: `og:video`,\n                                      content: video,\n                                  }\n                                : []\n                        )\n                        .concat(meta!)}\n                />\n            );\n        }}\n    />\n);\n\nSEO.defaultProps = {\n    lang: `en`,\n    meta: [],\n    keywords: [],\n};\n\nexport default SEO;\n","import { styled } from '../../../styles/styled';\n\nexport const Paragraph = styled.p`\n    color: ${props => props.theme.primaryColor};\n`;\n","import { styled } from '../../../styles/styled';\n\nexport const NavList = styled.ul`\n    list-style: none;\n    padding: 0;\n    margin: 0;\n`;\n\nexport default NavList;\n","import { styled } from '../../../styles/styled';\n\nexport const NavListItem = styled.li`\n    a {\n        color: inherit;\n        &.active {\n            color: ${props => props.theme.secondaryBackground};\n            font-weight: bolder;\n        }\n    }\n`;\n\nexport default NavListItem;\n","import React, { FunctionComponent } from 'react';\nimport { NavProps } from './nav';\nimport { styled } from '../../../styles/styled';\nimport NavList from './nav-list';\nimport { Link } from 'gatsby';\nimport NavListItem from './nav-list-item';\nimport { Paragraph } from '../../atomics/typography/paragraph';\n\nexport const BottomNavGroup = styled.nav`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n`;\n\nexport const BottomNavContainer = styled.div`\n    display: flex;\n    > :not(:last-child) {\n        margin-right: 10em;\n    }\n`;\n\nexport const FooterContainer = styled.footer`\n    color: ${props => props.theme.primaryColor};\n    padding: 2em;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\nexport const BottomNav: FunctionComponent<NavProps> = props => (\n    <FooterContainer>\n        <BottomNavContainer>\n            <div>\n                <Paragraph as={'summary'}>\n                    Byron Mejia <br /> software developer, dog owner, and stuff\n                </Paragraph>\n            </div>\n\n            <BottomNavGroup>\n                <NavList>\n                    {props.menuQuery.site.siteMetadata.menuLinks.map(link => (\n                        <NavListItem key={link.link}>\n                            <Link to={link.link} activeClassName='active'>\n                                {link.name}\n                            </Link>\n                        </NavListItem>\n                    ))}\n                </NavList>\n            </BottomNavGroup>\n        </BottomNavContainer>\n        <Paragraph>ABN: 79 833 467 197</Paragraph>\n    </FooterContainer>\n);\n\nexport default BottomNav;\n","export type CSSVariableTypes =\n    | 'primaryBackground'\n    | 'secondaryBackground'\n    | 'primaryColor'\n    | 'secondaryColor'\n    | 'primaryHighlight'\n    | 'secondaryHighlight';\nexport type ThemeRecord = Readonly<Record<CSSVariableTypes, string>>;\n\nexport const PrimaryTheme: ThemeRecord = {\n    primaryBackground: '#171219',\n    secondaryBackground: '#EA526F',\n    primaryColor: '#f9faf1',\n    secondaryColor: '#46B1E9',\n    primaryHighlight: '#EF6F6C',\n    secondaryHighlight: '#56E39F',\n};\nexport default PrimaryTheme;\n","import { createGlobalStyle } from 'styled-components';\nimport PrimaryTheme from './theme';\n\nexport const GlobalStyle = createGlobalStyle`\n    /* You can add global styles to this file, and also import other style files */\n    @import url('https://fonts.googleapis.com/css?family=Open+Sans');\n\n    * {\n        box-sizing: border-box;\n    }\n\n    h1, h2 {\n        margin: .25em 0;\n    }\n\n    html, body {\n        width: 100%;\n        height: 100%;\n        margin: 0;\n        font-family: 'Open Sans', sans-serif;\n        background-color: ${PrimaryTheme.primaryBackground};\n        color: ${PrimaryTheme.primaryColor};\n    }\n\n    @media print {\n        body {\n            -webkit-print-color-adjust: exact;\n        }\n    }\n\n    @page {\n        size: A4 portrait;\n        margin-left: 0px;\n        margin-right: 0px;\n        margin-top: 0px;\n        margin-bottom: 0px;\n        margin: 0;\n        -webkit-print-color-adjust: exact;\n    }\n`;\n\nexport default GlobalStyle;\n","import React, { FunctionComponent, Fragment } from 'react';\nimport GlobalStyle from './global';\n\nconst GlobalStyleWrapper: FunctionComponent = ({ children }) => (\n    <Fragment>\n        <GlobalStyle />\n        {children}\n    </Fragment>\n);\n\nexport default GlobalStyleWrapper;\n","import React, { FunctionComponent } from 'react';\nimport { NavProps } from './nav';\n\nexport const TopNav: FunctionComponent<NavProps> = props => (\n    <header>{/*<nav>{JSON.stringify(props)}</nav>*/}</header>\n);\n\nexport default TopNav;\n","/* tslint:disable:jsx-no-lambda */\nimport React, { FunctionComponent } from 'react';\nimport { graphql, StaticQuery } from 'gatsby';\nimport { SiteMenuLinksQuery } from './site-menu-links-query';\nimport BottomNav from '../components/ui/nav/bottom-nav';\nimport { styled } from '../styles/styled';\nimport PrimaryTheme from '../styles/theme';\nimport GlobalStyleWrapper from '../styles/global.style.wrapper';\nimport { ThemeProvider } from 'styled-components';\nimport TopNav from '../components/ui/nav/top-nav';\n\nconst PageContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n    justify-content: space-between;\n`;\n\nconst Content = styled.div`\n    flex: 1;\n`;\n\nexport const MainLayout: FunctionComponent<{}> = props => (\n    <StaticQuery\n        query={graphql`\n            query SiteMenuLinksQuery {\n                site {\n                    siteMetadata {\n                        menuLinks {\n                            name\n                            link\n                        }\n                    }\n                }\n            }\n        `}\n        render={(data: SiteMenuLinksQuery) => (\n            <GlobalStyleWrapper>\n                <ThemeProvider theme={PrimaryTheme}>\n                    <PageContainer>\n                        <TopNav menuQuery={data} />\n                        <Content>{props.children}</Content>\n                        <BottomNav menuQuery={data} />\n                    </PageContainer>\n                </ThemeProvider>\n            </GlobalStyleWrapper>\n        )}\n    />\n);\n","import { styled } from '../../../styles/styled';\n\nexport const Header = styled.h1`\n    color: ${props => props.theme.primaryColor};\n`;\n"],"sourceRoot":""}